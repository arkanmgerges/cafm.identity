# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from identity import country_app_service_pb2 as identity_dot_country__app__service__pb2


class CountryAppServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.countryById = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/countryById",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_countryByIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_countryByIdResponse.FromString,
        )
        self.countries = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/countries",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_countriesRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_countriesResponse.FromString,
        )
        self.citiesByCountryId = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/citiesByCountryId",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdResponse.FromString,
        )
        self.cityByCountryId = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/cityByCountryId",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdResponse.FromString,
        )
        self.stateByCountryIdAndStateId = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/stateByCountryIdAndStateId",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdResponse.FromString,
        )
        self.statesByCountryId = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/statesByCountryId",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdResponse.FromString,
        )
        self.citiesByCountryIdAndStateId = channel.unary_unary(
            "/cafm.identity.country.CountryAppService/citiesByCountryIdAndStateId",
            request_serializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdRequest.SerializeToString,
            response_deserializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdResponse.FromString,
        )


class CountryAppServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def countryById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def countries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def citiesByCountryId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def cityByCountryId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def stateByCountryIdAndStateId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def statesByCountryId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def citiesByCountryIdAndStateId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CountryAppServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "countryById": grpc.unary_unary_rpc_method_handler(
            servicer.countryById,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_countryByIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_countryByIdResponse.SerializeToString,
        ),
        "countries": grpc.unary_unary_rpc_method_handler(
            servicer.countries,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_countriesRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_countriesResponse.SerializeToString,
        ),
        "citiesByCountryId": grpc.unary_unary_rpc_method_handler(
            servicer.citiesByCountryId,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdResponse.SerializeToString,
        ),
        "cityByCountryId": grpc.unary_unary_rpc_method_handler(
            servicer.cityByCountryId,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdResponse.SerializeToString,
        ),
        "stateByCountryIdAndStateId": grpc.unary_unary_rpc_method_handler(
            servicer.stateByCountryIdAndStateId,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdResponse.SerializeToString,
        ),
        "statesByCountryId": grpc.unary_unary_rpc_method_handler(
            servicer.statesByCountryId,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdResponse.SerializeToString,
        ),
        "citiesByCountryIdAndStateId": grpc.unary_unary_rpc_method_handler(
            servicer.citiesByCountryIdAndStateId,
            request_deserializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdRequest.FromString,
            response_serializer=identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "cafm.identity.country.CountryAppService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CountryAppService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def countryById(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/countryById",
            identity_dot_country__app__service__pb2.CountryAppService_countryByIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_countryByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def countries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/countries",
            identity_dot_country__app__service__pb2.CountryAppService_countriesRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_countriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def citiesByCountryId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/citiesByCountryId",
            identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def cityByCountryId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/cityByCountryId",
            identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_cityByCountryIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def stateByCountryIdAndStateId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/stateByCountryIdAndStateId",
            identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_stateByCountryIdAndStateIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def statesByCountryId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/statesByCountryId",
            identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_statesByCountryIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def citiesByCountryIdAndStateId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/cafm.identity.country.CountryAppService/citiesByCountryIdAndStateId",
            identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdRequest.SerializeToString,
            identity_dot_country__app__service__pb2.CountryAppService_citiesByCountryIdAndStateIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
