version: "3.8"

services:
  cafm-identity-server:
    image: cafm-identity:local
    build:
      context: ../../..
      dockerfile: .pkg/local/docker/Dockerfile
    ports:
      - "9999:9999"
    entrypoint: ["hupper", "python", "-m", "src.port_adapter.api.grpc.server"]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app

  cafm-identity-api-cmd:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.api_command.ApiCommandListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-cmd:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.identity_command.IdentityCommandListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-project-evt:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.project_event.ProjectEventListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-identity-evt:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.identity_event.IdentityEventListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-api-failed-cmd-handle:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.api_command.ApiFailedCommandHandleListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-failed-cmd-handle:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.identity_command.IdentityFailedCommandHandleListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-failed-evt-handle:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.identity_event.IdentityFailedEventHandleListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-project-failed-evt-handle:
    image: cafm-identity:local
    entrypoint:
      [
        "hupper",
        "python",
        "-m",
        "src.port_adapter.messaging.listener.project_event.ProjectFailedEventHandleListener",
      ]
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-script:
    image: cafm-identity:local
    command: >
      bash -c "python -m src.resource.script.admin_script_v2 check-schema-registry-readiness
      && python -m src.resource.script.admin_script_v2 check-redis-readiness
      && python -m src.resource.script.admin_script_v2 init-kafka-topics
      && python -m src.resource.script.admin_script_v2 init-schema-registry
      && python -m src.resource.script.admin_script_v2 init-arango-db
      && python -m src.resource.script.admin_script_v2 create-arango-db-user ${ADMIN_EMAIL:-admin@local.me} ${ADMIN_PASSWORD:-1234} ${DB_NAME:-cafm-identity}
      && python -m src.resource.script.admin_script assign-user-super-admin-role ${ADMIN_EMAIL:-admin@local.me} ${ADMIN_PASSWORD:-1234} ${DB_NAME:-cafm-identity}
      && python -m src.resource.script.admin_script build-resource-tree-from-file ${TREE_FILE:-src/resource/script/__test_tree.yaml.sample}
      && python -m src.resource.script.admin_script_v2 create-permission-with-permission-contexts-for-api-endpoints"
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app
    depends_on:
      - cafm-identity-server

  cafm-identity-import-maxmind-data-script:
    image: arangodb/arangodb:3.7.2.1
    command: sh src/resource/script/import_maxmind_data.sh
    working_dir: /app
    env_file:
      - ../../../.env
    networks:
      - cafm-infra_default
    volumes:
      - ../../..:/app

networks:
  cafm-infra_default:
    external: true
